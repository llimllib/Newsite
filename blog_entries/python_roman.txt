Functional Roman Numerals in Python
#time 01-12-08 17:52
#keywords python, code, programming
<p>Just as a quck note, I thought I'd post the cleanest python I could come up 
with to solve the <a href="http://billmill.org/roman.html">roman numerals</a> 
problem I discussed earlier. It tries to use a functional style while actually 
avoiding recursion. To do so, I wrote an iterative python unfold:

<p><code lang="python">def unfold(f, x):
    res = []                       
    while 1:
        try:
            w, x = f(x)
            res.append(w)
        except TypeError:
            return res</code>
<p>And then the answer becomes:
<p><code lang="python">numerals = [("M", 1000), ("CM", 900), ("D", 500), ("CD", 400),
    ("C", 100),  ("XC", 90),  ("L", 50),  ("XL", 40),
    ("X", 10),   ("IX", 9),   ("V", 5),   ("IV", 4),
    ("I", 1)]

def next(x):
    for n in numerals:
        if n[1] <= x: return (n[0], x-n[1])

def romanize(n):
    return "".join(unfold(next, n))</code>
<p>Compare to the haskell I posted before:
<p><code lang="haskell">romanize = concat . unfoldr next
    where next 0 = Nothing
          next x = Just $ second (x-) $ head $ filter ((<=x) . snd) numerals
          numerals = [("M", 1000), ("CM", 900), ("D", 500), ("CD", 400),
                      ("C", 100),  ("XC", 90),  ("L", 50),  ("XL", 40),
                      ("X", 10),   ("IX", 9),   ("V", 5),   ("IV", 4),
                      ("I", 1)]</code>
<p>The "where" idiom allows you to group helper functions and constants 
underneath the main function, and the unimportance of function order means you 
can highlight the high-level logic. The haskell code is much shorter and 
tighter than the python.
<p>Having powerful iterative functions like unfoldr in the standard library is 
another clear win for Haskell; it took me more lines to define unfold than it 
did to define both next() and romanize(). (By the by, some googling failed to 
turn up a previous python implementation of unfold(); I think this code gets a 
lot uglier without it. I also don't see any obvious way to do it with 
itertools.)
<p>On the other hand, I find the simplicity of the python next() appealing, 
with its constructive instead of declarative approach. It's a less generic 
solution that's intuitively simpler (for me, still an imperative thinker).  
<p>You could match the haskell more exactly:
<p><code lang="python">from itertools import ifilter

def second(f, (a, b)): return (a, f(b))

def next(x):
    return second(lambda a: x-a, ifilter(lambda (y, z): z <= x, numerals).next()</code>
<p>but the result is pretty ugly. The inability to compose functions compactly
results in a lot of boilerplate, and in having to pick a lot of meaningless 
variable names that obscure what's going on. We could move the lambdas out of
the call and give them names:
<p><code lang="python">def next(x):
    subx = lambda a: x-a
    ltx = lambda (y, z): z <= x

    return second(subx, ifilter(ltx, numerals).next())</code>
<p>And it's a little better, but I think we're now pretty far from idiomatic 
python.
<p><h2>Conclusion</h2>
<p>The python translation of the haskell isn't bad, but I do think it loses
something. The unfold() trick works really well, and translates easily into
an imperative, pythonic implementation; I'll look for ways to use it in the 
future. And, finally, I'm pretty jealous of Haskell's function combination
abilities.
<p><h2>Updates</h2>
<p>In the <a href="http://programming.reddit.com/info/65bpf/comments/">comments</a>
at reddit, nostrademons posts a nicer unfold function:
<p><code lang="python">def unfold(f, x):
    while True:
        w, x = f(x)
        yield w</code>
<p>And Kay Schluehr prefers the iterative solution:
<p><code lang="python"> numerals = (("M", 1000), ("CM", 900), ("D", 500), ("CD", 400),
("C", 100),("XC", 90),("L", 50),("XL", 40), ("X", 10), ("IX", 9), ("V", 5), 
("IV", 4), ("I", 1))

def romanize(n):
    roman = []
    for ltr, num in numerals:
        (k,n) = divmod(n, num)
        roman.append(ltr*k)
    return "".join(roman)</code>
<p>David Pollak contributes a Scala unfold and romanize <a
href="http://scala-blogs.org/2008/01/roman-numerals-in-scala.html">at
his blog</a>.
