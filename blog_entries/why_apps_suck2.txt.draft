Why Applications Suck: How We Got Here (Part 2)
#Keywords: applications, computer, programming, internet, storage
#time 08-28-07 01:31
In the <a href="why_apps_suck.html">previous article</a>, I presented the 
hypotheses that modern desktop applications suck because they're a pain to 
install, and that web-based applications are not going to be the answer for 
some appliactions. In this article, I'll talk briefly about how software 
installation got the way it is, before I talk about how it can be improved.<p>

<h2>How We Got Here</h2><p>

Application distribution from <a 
href="http://en.wikipedia.org/wiki/ZX_Spectrum">the earliest days</a> all the 
way up to the mid-1990s was pretty simple stuff - you distributed your 
application on <a href="http://en.wikipedia.org/wiki/Magnetic_tapes">some</a> 
<a href="http://en.wikipedia.org/wiki/Floppy_disk">sort</a> of <a 
href="http://en.wikipedia.org/wiki/Cd-rom">physical</a> <a 
href="http://en.wikipedia.org/wiki/Dvd">media</a>. Users either ran the 
program from the drive, copied it manually to their computers, or used an 
install program on the disk to get it onto their hard drive.<p>

In the mid-1990s, the popularity of the internet made it a disruptive
mechanism for application distribution. Although the 
slow connection speeds at the time made large downloads painful, their utility 
was clearly apparent. Sites like <a 
href="http://en.wikipedia.org/wiki/Tucows#Shareware_Download_Site">Tucows</a> 
and <a href="http://en.wikipedia.org/wiki/Download.com">download.com</a>, as 
well as many less scrupulous <a 
href="http://en.wikipedia.org/wiki/Warez">warez</a> sites,
brought free and shareware software to the New Internet Masses. (Of course, <a 
href="http://en.wikipedia.org/wiki/Bulletin_board_system#Content_and_Access">BBS</a> 
users surely just snickered.)<p>

It was natural that when applications came to the web, they were distributed 
using an analogue of the format with which their creators were most familiar.  
Applications larger than a simple executable were often distributed in <a 
href="http://en.wikipedia.org/wiki/Tar_%28file_format%29">some</a> <a 
href="http://en.wikipedia.org/wiki/Zip_file">sort</a> of <a 
href="http://en.wikipedia.org/wiki/Cabinet_%28file_format%29">archive</a> <a 
href="http://en.wikipedia.org/wiki/Rar">format</a>, which the user had to 
manually unpack, after which the user either copied the contents into a 
directory or ran a setup program included in the distribution. Slightly more 
advanced programs distributed themselves as a program to unpack the data 
contained within, and automatically start a setup program.<p>

<h2>Unix To The Rescue</h2><p>

While the internet was ever so slowly changing application distribution in the 
PC world, Unix geeks were busy figuring out a <a 
href="http://en.wikipedia.org/wiki/Ports_collection">better</a> <a 
href="http://en.wikipedia.org/wiki/Advanced_Packaging_Tool">way</a> to 
distribute software. The free nature of many of the programs distributed on 
Unix systems meant that the users of those systems could innovate the way in 
which they were shared.  Just because programmer A wrote a program didn't mean 
that programmer B couldn't distribute it some better way, which simply was not 
the case on the PC.<p>

In this way, open software allowed for the first significant innovation in the 
application installation space since the invention of magnetic tape: a central 
repository of programs composed largely of small parts and the dependancy 
information necessary to construct full programs out of those parts. On these 
systems, all a user had to do to install a program called "Liebniz" was to type 
"<em>install-command</em> Liebniz", and the system would do the following:<p>

<ul><li>Go to a central repository and look up Liebniz</li>
<li>Download the source or binary associated with the program</li>
<li>Download the source or binary associated with all dependencies of Liebniz 
(and the dependencies' dependencies, etc)</li>
<li>Download and run some script which contained the necessary instructions for 
building and/or running Liebniz</li></ul><p>

This innovation reduced application installation from the often painful unix 
compilation process to a one-line command that even non-expert users could 
understand. Soon, the idea had <a 
href="http://en.wikipedia.org/wiki/Yellow_dog_Updater%2C_Modified">spread</a> 
to <a href="http://klik.atekon.de/">many</a> <a 
href="http://www.blastwave.org/about.html">other</a> <a 
href="http://www.macports.org/">systems</a>, even <a 
href="http://windows-get.sourceforge.net/">that OS you've heard of</a>.<p>

<h2>And Everyone Was Englightened and Happy, Right?</h2><p>

Even within the open source community, which now has its shiny one-step 
installers, <a 
href="http://osnews.com/story.php/16956/Decentralised-Installation-Systems">not 
everyone is satisfied</a>. With the coming of web applications, desktop apps 
have to compete with programs whose "installation" can be a single click in 
your browser. Also, security concerns about systems where essentially random 
"maintainers" get to run scripts as root on your computer persist, and the 
difficulty of retaining active maintainers of massive numbers of programs is 
becoming more and more apparent.<p>

And so, a third wave of installers has begun to appear. In these systems, the 
packagers and distributors are cut out of the loop, with the responsibility of 
package maintenance returned to the programmers themselves. Since this is 
mostly a new method of package distribution, each system does its job 
differently. What follows is a survey of a few interesting systems I found [1].


In the third, and final, part of the series, we'll talk about what has been 
done about these concerns, and what more could be done in the future.<p>
